diff -urN -x CVS kdebindings.orig/debian/control kdebindings/debian/control
--- kdebindings.orig/debian/control	Thu Aug 12 20:10:53 2004
+++ kdebindings/debian/control	Fri Aug 13 21:06:52 2004
@@ -1,5 +1,5 @@
 Source: kdebindings
-Build-Depends: binutils-dev, debhelper (>> 4.0.0), gawk, gettext, gij, gcj, libgcj4-dev, fastjar, kdelibs4-dev (>= 4:3.2.92-1), libglib1.2-dev, libgtk1.2-dev, python2.3-dev, perl (>= 5.6.0-16), libqt3-compat-headers (>= 3:3.3.2-0pre2), sharutils
+Build-Depends: binutils-dev, debhelper (>> 4.0.0), gawk, gettext, gij, gcj, libgcj4-dev, fastjar, kdelibs4-dev (>= 4:3.2.92-1), libglib1.2-dev, libgtk1.2-dev, python2.3-dev, perl (>= 5.6.0-16), libqt3-compat-headers (>= 3:3.3.2-0pre2), sharutils, ruby
 Section: devel
 Priority: optional
 Maintainer: Debian Qt/KDE Maintainers <debian-qt-kde@lists.debian.org>
diff -urN -x CVS kdebindings.orig/kalyptus/ChangeLog kdebindings/kalyptus/ChangeLog
--- kdebindings.orig/kalyptus/ChangeLog	Mon Jul 26 18:02:59 2004
+++ kdebindings/kalyptus/ChangeLog	Thu Aug 19 10:04:13 2004
@@ -1,18 +1,23 @@
+2004-08-19  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>
+
+ * A namespace such as KIO:: can be spread over several header files, the source
+   names are now kept in a property list so that all the includes can be generated.
+
 2004-07-26  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>
 
-	* QMap and QPair template types such as 'QMap<QCString, DCOPRef>' with an 
-	  embedded comma, were not being correctly normalised. A space was left in 
-	  the smoke type.
+ * QMap and QPair template types such as 'QMap<QCString, DCOPRef>' with an 
+   embedded comma, were not being correctly normalised. A space was left in 
+   the smoke type.
 
 2004-07-25  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>
 
-	* When the Smoke code for accessing an enum was generated, it was assuming
-	  that the enum was in the same source file as the class. This doesn't work
-	  for namespaces like KIO:: where enums can be spread over several source
-	  files.
-	* The solution is to add a source file property to each enum, and when the
-	  accessor code for the enum is generated a suitable include can be added.
-	* Fixes problem reported by Luca Perossa
+ * When the Smoke code for accessing an enum was generated, it was assuming
+   that the enum was in the same source file as the class. This doesn't work
+   for namespaces like KIO:: where enums can be spread over several source
+   files.
+ * The solution is to add a source file property to each enum, and when the
+   accessor code for the enum is generated a suitable include can be added.
+ * Fixes problem reported by Luca Perossa
 
 	CCMAIL: kde-bindings@kde.org
 
diff -urN -x CVS kdebindings.orig/kalyptus/kalyptus kdebindings/kalyptus/kalyptus
--- kdebindings.orig/kalyptus/kalyptus	Tue Aug  3 20:11:35 2004
+++ kdebindings/kalyptus/kalyptus	Thu Aug 19 10:04:13 2004
@@ -2,7 +2,7 @@
 
 # KDOC -- C++ and CORBA IDL interface documentation tool.
 # Sirtaj Singh Kang <taj@kde.org>, Jan 1999.
-# $Id$
+# $Id$
 
 # All files in this project are distributed under the GNU General
 # Public License. This is Free Software.
@@ -1229,6 +1229,10 @@
 	$node->AddProp( "NodeType", $cNodeType );
 	$node->AddProp( "Compound", 1 );
 	$node->AddProp( "Source", $cSourceNode );
+	
+	if ($cNodeType eq 'namespace') {
+		$node->AddPropList( "Sources", $cSourceNode );
+	}
 
 	$node->AddProp( "KidAccess", $access );
 	$node->AddProp( "Tmpl", $tmplArgs ) unless $tmplArgs eq "";
diff -urN -x CVS kdebindings.orig/kalyptus/kalyptusCxxToSmoke.pm kdebindings/kalyptus/kalyptusCxxToSmoke.pm
--- kdebindings.orig/kalyptus/kalyptusCxxToSmoke.pm	Mon Jul 26 18:02:59 2004
+++ kdebindings/kalyptus/kalyptusCxxToSmoke.pm	Thu Aug 19 10:04:13 2004
@@ -1390,7 +1390,14 @@
         if($classNode->{NodeType} eq 'namespace') {
            $switchCode .= "    (void)obj;\n";
             $methodCode .= "public:\n";
-        } elsif(! $classNode->{BindingDerives}) {
+        	my $s;
+        	for my $sn( @{$classNode->{Sources}} ) {
+    		if ( ($s = $sn->{astNodeName}) !~ s!.*(kio/|kparts/|dom/|kabc/|ksettings/|kjs/|ktexteditor/|kdeprint/|kdesu/)(.*)!$1$2!m ) {
+    			$s =~ s!.*/(.*)!$1!m;
+			}
+			$addInclude{ $s } = 1;
+        	}
+         } elsif(! $classNode->{BindingDerives}) {
             $methodCode .= "private:\n";
             $methodCode .= "    $className *xthis;\n";
             $methodCode .= "public:\n";
diff -urN -x CVS kdebindings.orig/korundum/ChangeLog kdebindings/korundum/ChangeLog
--- kdebindings.orig/korundum/ChangeLog	Tue Aug  3 18:15:47 2004
+++ kdebindings/korundum/ChangeLog	Tue Aug 24 20:56:15 2004
@@ -1,14 +1,37 @@
+2004-08-24  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>
+
+ * The form 'foo?' can be used as a synonym for isFoo() or hasFoo() dcop methods. 
+ * Instead of:
+         result = dcopRef.isFoo()
+ * Use this more rubyish form:
+         result = dcopRef.foo?
+         if result.nil?
+             puts "DCOP predicate failed"
+         else
+             puts "foo? is #{result}"
+         end
+
+
+2004-08-16  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>
+
+ * The 'qWarning()' calls in korundum.rb needed to be prefixed with the 'Qt.'' module
+   otherwise a missing dcop call causes an infinite loop.
+
+2004-08-14  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>
+
+ * Added KServiceGroup::List to ruby array marshaller
+
 2004-08-03  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>
 
-	* Fixed regression bug in emitting dcop signals
+ * Fixed regression bug in emitting dcop signals
 
 2004-08-03  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>
 
-	* Added a KMountPoint::List marshaller
+ * Added a KMountPoint::List marshaller
 
 2004-07-30  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>
 
-	* Removed the various Q_INT32 etc types from the Smoke stack <--> QDataStream
+ * Removed the various Q_INT32 etc types from the Smoke stack <--> QDataStream
 	  marshalling. This was because the code generated by the dcopidl2cpp tool
 	  doesn't have them. So if a machine has native 64 bit ints, then that width 
 	  will be used rather than Q_INT32.
diff -urN -x CVS kdebindings.orig/korundum/README kdebindings/korundum/README
--- kdebindings.orig/korundum/README	Wed Jul 21 19:25:25 2004
+++ kdebindings/korundum/README	Tue Aug 24 20:56:15 2004
@@ -93,6 +93,23 @@
 		
 		klipper.clipboardContents = IO.readlines("myfile").to_s
 		
+		Instead of:
+		
+		result = dcopRef.isFoo()
+		
+		You can use this more rubyish form:
+		
+		result = dcopRef.foo?
+		if result.nil?
+			puts "DCOP predicate failed"
+		else
+			puts "foo? is #{result}"
+		end
+
+		Similarly you can use foo? as an alias for methods of the form 
+		hasFoo(). 
+		See examples/dcop/dcoppredicate.rb and dcopslot.rb
+		
 	- Send to a DCOPRef is similar:
 	    
 		There are two different ways to specify a DCOP send:
diff -urN -x CVS kdebindings.orig/korundum/rubylib/korundum/kdehandlers.cpp kdebindings/korundum/rubylib/korundum/kdehandlers.cpp
--- kdebindings.orig/korundum/rubylib/korundum/kdehandlers.cpp	Wed Aug  4 14:20:33 2004
+++ kdebindings/korundum/rubylib/korundum/kdehandlers.cpp	Sat Aug 14 10:18:26 2004
@@ -417,6 +417,66 @@
 	}
 }
 
+void marshall_KServiceGroupList(Marshall *m) {
+	switch(m->action()) {
+	case Marshall::FromVALUE: 
+		{
+		}
+		break;
+	case Marshall::ToVALUE: 
+		{
+	    KServiceGroup::List *offerList = (KServiceGroup::List*)m->item().s_voidp;
+	    if(!offerList) {
+		*(m->var()) = Qnil;
+		break;
+	    }
+
+	    VALUE av = rb_ary_new();
+
+	    for(KServiceGroup::List::ConstIterator it = offerList->begin();
+		it != offerList->end();
+		++it) {
+		KSycocaEntry *p = (*it);
+		VALUE obj = Qnil;
+		if (p->isType(KST_KService)) {
+			KService *s = static_cast<KService *>(p);
+			obj = getPointerObject(s);
+			if(obj == Qnil) {
+		    	smokeruby_object  * o = ALLOC(smokeruby_object);
+		    	o->smoke = m->smoke();
+		    	o->classId = m->smoke()->idClass("KService");
+		    	o->ptr = s;
+		    	o->allocated = true;
+		    	obj = set_obj_info("KDE::Service", o);
+			}
+		} else if (p->isType(KST_KServiceGroup)) {
+			KServiceGroup *g = static_cast<KServiceGroup *>(p);
+			obj = getPointerObject(g);
+			if(obj == Qnil) {
+		    	smokeruby_object  * o = ALLOC(smokeruby_object);
+		    	o->smoke = m->smoke();
+		    	o->classId = m->smoke()->idClass("KServiceGroup");
+		    	o->ptr = g;
+		    	o->allocated = true;
+		    	obj = set_obj_info("KDE::ServiceGroup", o);
+			}
+		}
+		
+		rb_ary_push(av, obj);
+        }
+
+	    *(m->var()) = av;		
+	    
+		if(m->cleanup())
+		delete offerList;
+		}
+		break;
+	default:
+		m->unsupported();
+		break;
+	}
+}
+
 void marshall_KMountPointList(Marshall *m) {
 	switch(m->action()) {
 	case Marshall::FromVALUE: 
@@ -993,6 +1053,7 @@
     { "KMimeType::Ptr", marshall_KMimeTypePtr },
     { "KService::Ptr", marshall_KServicePtr },
     { "KService::List", marshall_KServiceList },
+    { "KServiceGroup::List", marshall_KServiceGroupList },
     { "KServiceGroup::Ptr", marshall_KServiceGroupPtr },
     { "KMountPoint::List", marshall_KMountPointList },
     { "KServiceType::List", marshall_KServiceTypeList },
diff -urN -x CVS kdebindings.orig/korundum/rubylib/korundum/lib/KDE/korundum.rb kdebindings/korundum/rubylib/korundum/lib/KDE/korundum.rb
--- kdebindings.orig/korundum/rubylib/korundum/lib/KDE/korundum.rb	Tue Jul 27 10:32:53 2004
+++ kdebindings/korundum/rubylib/korundum/lib/KDE/korundum.rb	Tue Aug 24 20:56:15 2004
@@ -207,6 +207,14 @@
 								# Remove any arg names
 								args.gsub!(/ \w*/, "")
 							end
+							
+							if name =~ /^(is|has)(.)(.*)/
+								predicate = $2.downcase + $3 + '?'
+								if @functions[predicate].nil?
+									@functions[predicate] = return_type + " " + name + args
+								end
+							end
+							
 							if @functions[name].nil?
 								@functions[name] = return_type + " " + name + args
 							else
@@ -222,7 +230,7 @@
 				
 				method = @functions[method]
 				if method.nil?
-					qWarning( "DCOPRef: call #{k[0].id2name}() not found" )
+					Qt.qWarning( "DCOPRef: call #{k[0].id2name}() not found" )
 					return
 				end
 
@@ -261,7 +269,7 @@
 
 		def callExt(fun, *k)
 			if isNull
-				qWarning( "DCOPRef: call #{fun} on null reference error" )
+				Qt.qWarning( "DCOPRef: call #{fun} on null reference error" )
 				return
 			end
 			sig = fun
@@ -270,13 +278,13 @@
 			end
 			dc = dcopClient()
 			if !dc || !dc.isAttached
-				qWarning( "DCOPRef::call():  no DCOP client or client not attached error" )
+				Qt.qWarning( "DCOPRef::call():  no DCOP client or client not attached error" )
 				return
 			end
 			if sig =~ /([^\s]*)(\(.*\))/
 				full_name = $1+$2
 			else
-				qWarning( "DCOPRef: call #{fun} invalid format, expecting '<function_name>(<args>)'" )
+				Qt.qWarning( "DCOPRef: call #{fun} invalid format, expecting '<function_name>(<args>)'" )
 				return
 			end
 			return KDE::dcop_call(	self, 
@@ -287,7 +295,7 @@
 
 		def send(fun, *k)
 			if isNull
-				qWarning( "DCOPRef: send #{fun} on null reference error" )
+				Qt.qWarning( "DCOPRef: send #{fun} on null reference error" )
 			end
 			sig = fun
 			if fun.index('(') == nil
@@ -295,11 +303,11 @@
 			end
 			dc = dcopClient()
 			if !dc || !dc.isAttached
-				qWarning( "DCOPRef::send():  no DCOP client or client not attached error" )
+				Qt.qWarning( "DCOPRef::send():  no DCOP client or client not attached error" )
 				return
 			end
 			if !sig =~ /^([^\s]*)(\(.*\))/
-				qWarning( "DCOPRef: send #{sig} invalid format, expecting '<function_name>(<args>)'" )
+				Qt.qWarning( "DCOPRef: send #{sig} invalid format, expecting '<function_name>(<args>)'" )
 				return
 			end
 			return KDE::dcop_send(	self, 
diff -urN -x CVS kdebindings.orig/qtruby/ChangeLog kdebindings/qtruby/ChangeLog
--- kdebindings.orig/qtruby/ChangeLog	Wed Aug  4 19:22:34 2004
+++ kdebindings/qtruby/ChangeLog	Tue Aug 24 20:53:40 2004
@@ -1,16 +1,20 @@
+2004-08-23  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>
+
+ * A 'thing?' ruby method can now be used as a synonym for either isThing() or hasThing() in the Smoke runtime
+
 2004-08-04  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>
 
-	* Upped the QtRuby version to 1.0.0 - it must work now then..
+ * Upped the QtRuby version to 1.0.0 - it must work now then..
 
 2004-08-02  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>
 
-	* Added 'long long' and 'unsigned long long' marshallers
+ * Added 'long long' and 'unsigned long long' marshallers
 
 2004-07-29  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>
 
-	* The smokeruby_mark() gc marking f'n now marks the QTableItems owned
-	  by a QTable so they don't get garbage collected, even if there are no
-	  remaining references in the user code.
+ * The smokeruby_mark() gc marking f'n now marks the QTableItems owned
+   by a QTable so they don't get garbage collected, even if there are no
+   remaining references in the user code.
 
 2004-07-29  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>
 
diff -urN -x CVS kdebindings.orig/qtruby/README kdebindings/qtruby/README
--- kdebindings.orig/qtruby/README	Wed Jul 14 12:10:58 2004
+++ kdebindings/qtruby/README	Tue Aug 24 20:53:40 2004
@@ -60,6 +60,9 @@
 	- Properties 
 		'fooBar = 5' is a synonym for 'setFooBar(5)'
 		
+	- Predicates
+		'if foo?' is a synonym for 'if isFoo()' or 'if hasFoo()'
+		
 	- Operator overloading
 		The full range of Qt operator methods is available, for example:
 		
diff -urN -x CVS kdebindings.orig/qtruby/rubylib/qtruby/Qt.cpp kdebindings/qtruby/rubylib/qtruby/Qt.cpp
--- kdebindings.orig/qtruby/rubylib/qtruby/Qt.cpp	Wed Aug  4 19:22:34 2004
+++ kdebindings/qtruby/rubylib/qtruby/Qt.cpp	Tue Aug 24 20:53:40 2004
@@ -957,8 +957,35 @@
 static VALUE
 method_missing(int argc, VALUE * argv, VALUE self)
 {
-    VALUE klass = rb_funcall(self, rb_intern("class"), 0);
 	char * methodName = rb_id2name(SYM2ID(argv[0]));
+    VALUE klass = rb_funcall(self, rb_intern("class"), 0);
+	
+	// Look for 'thing?' methods, and try to match isThing() or hasThing() in the Smoke runtime
+	QRegExp px("^.*[?]$");
+	QString pred(rb_id2name(SYM2ID(argv[0])));
+	if (px.search(pred) != -1) {
+		smokeruby_object *o = value_obj_info(self);
+		if(!o || !o->ptr) {
+			rb_call_super(argc, argv);
+		}
+		
+		// Drop the trailing '?'
+		pred.replace(pred.length() - 1, 1, "");
+		
+		pred.replace(0, 1, pred.at(0).upper());
+		pred.replace(0, 0, QString("is"));
+		Smoke::Index meth = o->smoke->findMethod(o->smoke->classes[o->classId].className, pred.latin1());
+		
+		if (meth == 0) {
+			pred.replace(0, 2, QString("has"));
+			meth = o->smoke->findMethod(o->smoke->classes[o->classId].className, pred.latin1());
+		}
+		
+		if (meth > 0) {
+			methodName = (char *) pred.latin1();
+		}
+	}
+		
 	VALUE * temp_stack = (VALUE *) calloc(argc+3, sizeof(VALUE));
     temp_stack[0] = rb_str_new2("Qt");
     temp_stack[1] = rb_str_new2(methodName);
diff -urN -x CVS kdebindings.orig/smoke/kde/kde_header_list kdebindings/smoke/kde/kde_header_list
--- kdebindings.orig/smoke/kde/kde_header_list	Sun Jul 25 10:03:33 2004
+++ kdebindings/smoke/kde/kde_header_list	Thu Aug 19 10:03:17 2004
@@ -426,4 +426,6 @@
 kio/thumbcreator.h
 kio/uiserver.h
 kio/uiserver_stub.h
+netwm_def.h
+netwm.h
 
